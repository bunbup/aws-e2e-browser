---
 - name: Start AWS EC2 Instance
   hosts: localhost
   connection: local
   gather_facts: false
   vars:
     region: us-east-2
     ami: ami-00399ec92321828f5
     ssh_key: e2e-browser-poc
     subnet_id: subnet-491b5205
     name_tag: test
   tasks:
     - name: Create EC2 instance
       ec2:
         instance_type: t2.medium
         image: "{{ ami }}"
         count: 1
         key_name: "{{ ssh_key }}"
         wait: yes
         group: default 
         region: "{{ region }}"
         vpc_subnet_id: "{{ subnet_id }}"
         assign_public_ip: yes
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         instance_tags:
           Name: "{{ name_tag }}"
       register: testhost
     - name: Add new instance to host group
       add_host:
         hostname: "{{ testhost.instances[0].public_ip }}"
         groupname: awshost
     - name: Wait for SSH to come up
       wait_for:
         host: "{{ testhost.instances[0].public_ip }}"
         port: 22
         delay: 60
         timeout: 320
         state: started
       ignore_errors: yes

 - name: Setup EC2 instance
   hosts: awshost
   gather_facts: true
   remote_user: ubuntu
   become: true
   tasks:
     - name: 
       apt:
         name: 
          - unzip
          - libatk-bridge2.0-0
          - libatk1.0-0
          - libnss3
          - libcups2
          - libxkbcommon0
          - libxcomposite1
          - libxdamage1
          - libxfixes3
          - libxrandr2
          - libxkbcommon0
          - libgbm1
          - libxshmfence1
          - libx11-xcb1
          - libpango-1.0-0
          - libcairo2
          - nodejs
          - npm
         state: present
         update_cache: yes
       ignore_errors: yes
 - name: Install chrome
   hosts: awshost
   gather_facts: true
   remote_user: ubuntu
   become: true
   tasks:
     - name: Download chrome
       ansible.builtin.unarchive:
         src: https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2F889626%2Fchrome-linux.zip?generation=1623022869546871&alt=media
         dest: /home/ubuntu
         remote_src: yes
         owner: ubuntu
         group: ubuntu
 - name: Copy tests
   hosts: awshost
   gather_facts: true
   remote_user: ubuntu
   tasks:
     - name: Copy test
       ansible.builtin.copy:
         src: project
         dest: /home/ubuntu
         owner: ubuntu
       ignore_errors: yes
 - name: Run tests
   hosts: awshost
   gather_facts: true
   remote_user: ubuntu
   tasks:
     - name: Install project dependencies
       shell:
         chdir: /home/ubuntu/project
         cmd: npm install
       register: testout
       ignore_errors: yes
     - name: Run tests
       shell:
         chdir: /home/ubuntu/project
         cmd: npm test
       register: testout
       ignore_errors: yes

#  - name: Fetch results
#    hosts: awshost
#    gather_facts: true
#    remote_user: ubuntu
#    tasks:
#      - name: Archive test reports
#        archive:
#          path: /home/ubuntu/test-app/build/reports
#          dest: /home/ubuntu/reports.gzip
#          format: gz
#        ignore_errors: yes
#      - name: Archive test results
#        archive:
#          path: /home/ubuntu/test-app/build/test-results
#          dest: /home/ubuntu/test-results.gzip
#          format: gz
#        ignore_errors: yes
#      - name: Get test reports
#        fetch:
#          src: /home/ubuntu/reports.gzip
#          dest: output/reports.gzip
#          flat: true
#        ignore_errors: yes
#      - name: Get test results
#        fetch:
#          src: /home/ubuntu/test-results.gzip
#          dest: output/test-results.gzip
#          flat: true
#        ignore_errors: yes
#      - name: Get stdout output
#        local_action: copy content="{{ testout.stdout }}" dest="output/stdout.txt"
#        ignore_errors: yes
#      - name: Get stderr output
#        local_action: copy content="{{ testout.stderr }}" dest="output/stderr.txt"
#        ignore_errors: yes
#      - name: Get return code
#        local_action: copy content="{{ testout.rc }}" dest="output/return-code.txt"
#        ignore_errors: yes
#      - name: Get execution time
#        local_action: copy content="{{ testout.delta }}" dest="output/execution-time.txt"
#        ignore_errors: yes

#  - name: Terminate EC2 instance
#    hosts: localhost
#    connection: local
#    gather_facts: false
#    vars:
#       region: us-west-2
#    tasks:
#      - name: Terminate EC2 instance
#        ec2:
#          state: "absent"
#          instance_ids: "{{ testhost.instance_ids }}"
#          region: "{{ region }}"
#          aws_access_key: "{{ aws_access_key }}"
#          aws_secret_key: "{{ aws_secret_key }}"


